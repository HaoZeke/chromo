name: Release

on:
  workflow_dispatch:

jobs:
  wheels:
    name: ${{ matrix.py }} ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12]
        arch: [native, arm64]
        # arch: [native, universal2]
        py: [cp39]
        # os: [ubuntu-latest, windows-latest, macos-12]
        # arch: [native, aarch64, universal2]
        # py: [cp37, cp38, cp39, cp310]
        # exclude:
        #   - os: windows-latest
        #     arch: aarch64
        #   - os: windows-latest
        #     arch: universal2
        #   - os: macos-latest
        #     arch: aarch64
        #   - os: macos-latest
        #     arch: universal2
        #     py: cp37
        #   - os: ubuntu-latest
        #     arch: universal2
    steps:

      - if: ${{ matrix.os == 'macos-12' }}
        name: Setup gfortran for Macos
        run: |
          # this is taken verbatim from the numpy azure pipeline setup.
          set -xe
          # same version of gfortran as the open-libs and numpy-wheel builds
          curl -L https://github.com/MacPython/gfortran-install/raw/master/archives/gfortran-4.9.0-Mavericks.dmg -o gfortran.dmg
          GFORTRAN_SHA256=$(shasum -a 256 gfortran.dmg)
          KNOWN_SHA256="d2d5ca5ba8332d63bbe23a07201c4a0a5d7e09ee56f0298a96775f928c3c4b30  gfortran.dmg"
          if [ "$GFORTRAN_SHA256" != "$KNOWN_SHA256" ]; then
              echo sha256 mismatch
              exit 1
          fi
          hdiutil attach -mountpoint /Volumes/gfortran gfortran.dmg
          sudo installer -pkg /Volumes/gfortran/gfortran.pkg -target /
          otool -L /usr/local/gfortran/lib/libgfortran.3.dylib
          # Manually symlink gfortran-4.9 to plain gfortran for f2py.
          # No longer needed after Feb 13 2020 as gfortran is already present
          # and the attempted link errors. Keep this for future reference.
          # ln -s /usr/local/bin/gfortran-4.9 /usr/local/bin/gfortran


      - uses: actions/checkout@v3
        with:
          submodules: true

      - if: ${{ matrix.arch == 'aarch64' }}
        uses: docker/setup-qemu-action@v2

      - if: ${{ matrix.os != 'macos-12' }}
        uses: awvwgk/setup-fortran@main
        id: setup-fortran
        with:
          compiler: gcc
          version: 11

# Step for debugging
      # - run: ${{ env.FC }} --version
      #   env:
      #     FC: ${{ steps.setup-fortran.outputs.fc }}

      - if: ${{ matrix.os == 'windows-latest' }}
        uses: pypa/cibuildwheel@v2.11.2
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BUILD: ${{ matrix.py }}-*
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_SKIP: "*musllinux*"
          CMAKE_GENERATOR: "MinGW Makefiles"
          FC: ${{ steps.setup-fortran.outputs.fc }}

      - if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: pypa/cibuildwheel@v2.11.2
        env:
          # Check setuptools version
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BUILD: ${{ matrix.py }}-*
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_SKIP: "*musllinux*"

      - if: ${{ matrix.os == 'macos-12' }}
        uses: pypa/cibuildwheel@v2.11.2
        env:
          # Check setuptools version
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BUILD: ${{ matrix.py }}-*
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_SKIP: "*musllinux*"
          CIBW_TEST_SKIP: "*-macosx_universal2:arm64"
          CIBW_TEST_COMMAND: pytest -vv {package}/tests/test_generators.py
          no_proxy: '*'

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  # sdist:
  #   name: source package
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true

  #     - uses: actions/setup-python@v4
  #       name: Install Python
  #       with:
  #         python-version: '3.9'

  #     - run: python -m pip install --upgrade pip wheel
  #     - run: python setup.py sdist
  #     - run: python -m pip install --prefer-binary -v `echo dist/impy-*`[test]
  #     - run: python -m pip install pytest
  #     - run: python -m pytest -vv

  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: dist/*.tar.gz

  # upload:
  #   needs: [wheels, sdist]
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/master' }} && startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: artifact
  #         path: dist

  #     - uses: pypa/gh-action-pypi-publish@master
  #       with:
  #         user: __token__
  #         password: ${{secrets.pypi_password}}


# name: WindowsTest

# on:
#   workflow_dispatch:

# jobs:
#   test:
#     name: ${{ matrix.py }} ${{ matrix.os }} ${{ matrix.arch }}

#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [windows-latest]
#         arch: [native]
#         py: [cp39]
#     steps:

#     - uses: actions/checkout@v3
#       with:
#         submodules: true

#     - uses: actions/setup-python@v2
#       with:
#         python-version: ${{ matrix.python-version }}

#     - uses: awvwgk/setup-fortran@main
#       id: setup-fortran
#       with:
#         compiler: gcc
#         version: 11


#     - run: ${{ env.FC }} --version
#       env:
#         FC: ${{ steps.setup-fortran.outputs.fc }}


#     - run: python -m pip install --upgrade pip
#     - name: Installing impy
#       run: |
#         $env:CMAKE_GENERATOR
#         $env:FC
#         python -m pip install --prefer-binary -v .[test]
#       env:
#         CMAKE_GENERATOR: "MinGW Makefiles"
#         FC: ${{ steps.setup-fortran.outputs.fc }}
#     - run: python -m pytest -vv
